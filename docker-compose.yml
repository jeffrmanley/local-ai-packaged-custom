volumes:
  n8n_storage:
  ollama_storage:
  qdrant_storage:
  open-webui:
  flowise:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=db
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command: ["-c", "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"]

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    environment:
      - PORT=3001
    ports:
      - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ~/.flowise:/root/.flowise
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: always
    build: 
      context: .
      dockerfile: Dockerfile.n8n
    shm_size: '2gb' # Optional but recommended for Puppeteer/Chromium
    ports:
      - 5678:5678
    environment:
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_FILESYSTEM_BINARY_DATA_PATH=/home/node/.n8n/binaryData
      - N8N_RELEASE_DATE=2025-03-19T20:45:00Z
      - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
      - N8N_RUNNERS_ENABLED=true
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
      - "C:/Ionic/OneDrive - Ionic Partners/Potential Companies:/ionicpc"
      - "C:/Ionic/OneDrive - Ionic Partners/Portfolio:/ionicportfolio"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command: ["-c", "sleep 20 && n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"]
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      - n8n

  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
      - ollama-gpu-amd

  whisper-api:
    build:
      context: ./whisper-api
      dockerfile: Dockerfile
    container_name: whisper-api
    restart: unless-stopped
    ports:
      - "5000:5000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
        limits:
          memory: 4G


  pdf-to-text:
    build:
      context: ./pdf-to-text
      dockerfile: Dockerfile
    container_name: pdf-to-text
    restart: unless-stopped
    ports:
      - "5001:5001"

  ocr-service:
    image: jbarlow83/ocrmypdf-alpine
    container_name: ocr-service
    restart: unless-stopped
    ports:
      - "5100:5000"  # container listens on port 5000; map as needed
    entrypoint: ["python"]
    command: ["webservice.py"]

  mcp-stagehand:
    build:
      context: ./mcp-stagehand
      dockerfile: Dockerfile   # or Dockerfile.mcp if you named it that way
    container_name: mcp-stagehand
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production

  video-processing:
    build:
      context: ./video-processing
      dockerfile: Dockerfile
    container_name: video-processing
    restart: always
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility,video
    ports:
      - "6060:6000"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

# (Optional: You can add other services here if needed)
